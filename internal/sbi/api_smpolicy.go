/*
 * Npcf_SMPolicyControl
 *
 * Session Management Policy Control Service
 *
 * API version: 1.0.1
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package sbi

import (
	"net/http"

	"github.com/gin-gonic/gin"

	"github.com/free5gc/openapi"
	"github.com/free5gc/openapi/models"
	"github.com/free5gc/pcf/internal/logger"
	"github.com/free5gc/pcf/internal/sbi/producer"
	"github.com/free5gc/util/httpwrapper"
)

func (s *Server) getSmPolicyRoutes() []Route {
	return []Route{
		{
			Method:  http.MethodPost,
			Pattern: "/sm-policies",
			APIFunc: s.HTTPSmPoliciesPost,
		},
		{
			Method:  http.MethodPost,
			Pattern: "/sm-policies/:smPolicyId/delete",
			APIFunc: s.HTTPSmPoliciesSmPolicyIdDeletePost,
		},
		{
			Method:  http.MethodGet,
			Pattern: "/sm-policies/:smPolicyId",
			APIFunc: s.HTTPSmPoliciesSmPolicyIDGet,
		},
		{
			Method:  http.MethodPost,
			Pattern: "/sm-policies/:smPolicyId/update",
			APIFunc: s.HTTPSmPoliciesSmPolicyIdUpdatePost,
		},
	}
}

// SmPoliciesPost -
func (s *Server) HTTPSmPoliciesPost(c *gin.Context) {
	var smPolicyContextData models.SmPolicyContextData
	// step 1: retrieve http request body
	requestBody, err := c.GetRawData()
	if err != nil {
		problemDetail := models.ProblemDetails{
			Title:  "System failure",
			Status: http.StatusInternalServerError,
			Detail: err.Error(),
			Cause:  "SYSTEM_FAILURE",
		}
		logger.SmPolicyLog.Errorf("Get Request Body error: %+v", err)
		c.JSON(http.StatusInternalServerError, problemDetail)
		return
	}

	// step 2: convert requestBody to openapi models
	err = openapi.Deserialize(&smPolicyContextData, requestBody, "application/json")
	if err != nil {
		problemDetail := "[Request Body] " + err.Error()
		rsp := models.ProblemDetails{
			Title:  "Malformed request syntax",
			Status: http.StatusBadRequest,
			Detail: problemDetail,
		}
		logger.SmPolicyLog.Errorln(problemDetail)
		c.JSON(http.StatusBadRequest, rsp)
		return
	}

	req := httpwrapper.NewRequest(c.Request, smPolicyContextData)
	rsp := producer.HandleCreateSmPolicyRequest(req)

	// step 5: response
	for key, val := range rsp.Header { // header response is optional
		c.Header(key, val[0])
	}
	responseBody, err := openapi.Serialize(rsp.Body, "application/json")
	if err != nil {
		logger.SmPolicyLog.Errorln(err)
		problemDetails := models.ProblemDetails{
			Status: http.StatusInternalServerError,
			Cause:  "SYSTEM_FAILURE",
			Detail: err.Error(),
		}
		c.JSON(http.StatusInternalServerError, problemDetails)
	} else {
		c.Data(rsp.Status, "application/json", responseBody)
	}
}

// SmPoliciesSmPolicyIdDeletePost -
func (s *Server) HTTPSmPoliciesSmPolicyIdDeletePost(c *gin.Context) {
	req := httpwrapper.NewRequest(c.Request, nil)
	req.Params["smPolicyId"] = c.Params.ByName("smPolicyId")

	rsp := producer.HandleDeleteSmPolicyContextRequest(req)

	responseBody, err := openapi.Serialize(rsp.Body, "application/json")
	if err != nil {
		logger.SmPolicyLog.Errorln(err)
		problemDetails := models.ProblemDetails{
			Status: http.StatusInternalServerError,
			Cause:  "SYSTEM_FAILURE",
			Detail: err.Error(),
		}
		c.JSON(http.StatusInternalServerError, problemDetails)
	} else {
		c.Data(rsp.Status, "application/json", responseBody)
	}
}

// SmPoliciesSmPolicyIdGet -
func (s *Server) HTTPSmPoliciesSmPolicyIDGet(c *gin.Context) {
	req := httpwrapper.NewRequest(c.Request, nil)
	req.Params["smPolicyId"] = c.Params.ByName("smPolicyId")

	rsp := producer.HandleGetSmPolicyContextRequest(req)

	responseBody, err := openapi.Serialize(rsp.Body, "application/json")
	if err != nil {
		logger.SmPolicyLog.Errorln(err)
		problemDetails := models.ProblemDetails{
			Status: http.StatusInternalServerError,
			Cause:  "SYSTEM_FAILURE",
			Detail: err.Error(),
		}
		c.JSON(http.StatusInternalServerError, problemDetails)
	} else {
		c.Data(rsp.Status, "application/json", responseBody)
	}
}

// SmPoliciesSmPolicyIdUpdatePost -
func (s *Server) HTTPSmPoliciesSmPolicyIdUpdatePost(c *gin.Context) {
	var smPolicyUpdateContextData models.SmPolicyUpdateContextData
	// step 1: retrieve http request body
	requestBody, err := c.GetRawData()
	if err != nil {
		problemDetail := models.ProblemDetails{
			Title:  "System failure",
			Status: http.StatusInternalServerError,
			Detail: err.Error(),
			Cause:  "SYSTEM_FAILURE",
		}
		logger.SmPolicyLog.Errorf("Get Request Body error: %+v", err)
		c.JSON(http.StatusInternalServerError, problemDetail)
		return
	}

	// step 2: convert requestBody to openapi models
	err = openapi.Deserialize(&smPolicyUpdateContextData, requestBody, "application/json")
	if err != nil {
		problemDetail := "[Request Body] " + err.Error()
		rsp := models.ProblemDetails{
			Title:  "Malformed request syntax",
			Status: http.StatusBadRequest,
			Detail: problemDetail,
		}
		logger.SmPolicyLog.Errorln(problemDetail)
		c.JSON(http.StatusBadRequest, rsp)
		return
	}

	req := httpwrapper.NewRequest(c.Request, smPolicyUpdateContextData)
	req.Params["smPolicyId"] = c.Params.ByName("smPolicyId")

	rsp := producer.HandleUpdateSmPolicyContextRequest(req)

	responseBody, err := openapi.Serialize(rsp.Body, "application/json")
	if err != nil {
		logger.SmPolicyLog.Errorln(err)
		problemDetails := models.ProblemDetails{
			Status: http.StatusInternalServerError,
			Cause:  "SYSTEM_FAILURE",
			Detail: err.Error(),
		}
		c.JSON(http.StatusInternalServerError, problemDetails)
	} else {
		c.Data(rsp.Status, "application/json", responseBody)
	}
}
